# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # set a fixed version for the image circleci/openjdk:8-jdk-node-browsers
      - image: circleci/openjdk:8-jdk-node-browsers
        environment:
          MAX_HEAP_SIZE: 2048m
          HEAP_NEWSIZE: 512m

    working_directory: ~/scalardl-web-client-sdk

    steps:
      - checkout
      # Restore dependencies
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}

      - setup_remote_docker

      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - run:
          name: Docker login
          command: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD

      - run:
          name: Spin container via docker compose
          command: docker-compose up -d
          working_directory: .circleci/


      - run:
          name: Docker Cp
          command: docker cp ./envoy.yaml envoy:/etc/envoy/envoy.yaml
          working_directory: .circleci/

      - run:
          name: Restart Envoy
          command: docker restart envoy

      - run:
          name: Debug docker ps
          command: docker ps

      - run:
          name: Wait for Cassandra
          # dockerize command is included in circleci/openjdk:8-jdk image
          command: dockerize -wait tcp://cassandra:9042 -timeout 30s

      - run:
          name: Copy cqlsh
          command: docker cp ./create_schema.cql cassandra:/create_schema.cql
          working_directory: .circleci/

      - run:
          name: Execute cqlsh
          command: docker exec cassandra cqlsh -f /create_schema.cql

      #      - run:
      #          name: Wait for Scalardl
      #          command: dockerize -wait tcp://127.0.0.1:80 -timeout 1m

      - run:
          name: Install Dependencies
          command: npm install

      - save_cache:
          key: v1-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules

      # run tests
      - run:
          command: npm test
          environment:
            MOCHA_FILE: "~/scalardl-web-client-sdk/mochawesome-report/mochawesome.html"
          when: always

      - store_test_results:
          path: ~/scalardl-web-client-sdk/mochawesome-report

      - store_artifacts:
          path: ~/scalardl-web-client-sdk/mochawesome-report
